

#filename_org=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""]
filename_org=['']*200
file_cnt=0
#print ("file_list: {}".format(file_list))
# print(len(sys.argv),sys.argv[0],sys.argv[1])

# ---   advan control bit list
Cbit=['C0','C1','C2','C3','C4','C5','C6','C7','C8','C9','C10','C11','C12','C13','C14','C15','C16','C17','C18','C19','C20','C21','C22','C23','C24','C25','C26','C27','C28','C29','C30','C31','W','DRE','DRE2','R','M2','/D','/D2','SCROFF']
# ---   advan x/y reg. list
xyreg_name=['XC_1','XS_1','XK_1','XB_1','XC_2','XS_2','XK_2','XB_2','XC_3','XS_3','XK_3','XB_3','XC_4','XS_4','XK_4','XB_4','XH_1','XH_2','XH_3','XH_4','XT1','XT2','XT3','XT4','XT5','XT6','XT7','XT8','XT9','XT10','XT11','XT12','XT13','XT14','XT15','XT16','YC_1','YS_1','YK_1','YB_1','YC_2','YS_2','YK_2','YB_2','YC_3','YS_3','YK_3','YB_3','YC_4','YS_4','YK_4','YB_4','YH_1','YH_2','YH_3','YH_4','YT1','YT2','YT3','YT4','YT5','YT6','YT7','YT8','YT9','YT10','YT11','YT12','YT13','YT14','YT15','YT16']
xyreg_=[0]*100   # --- x/y address value 

# ---   advan data reg. list
dreg_name=['D1A_1','D1B_1','D1C_1','D1D_1','D2A_1','D2B_1','D2C_1','D2D_1','D1E_1','D1F_1','D1G_1','D1H_1','D3_1','D3B_1','D4_1','D4B_1','D1A_2','D1B_2','D1C_2','D1D_2','D2A_2','D2B_2','D2C_2','D2D_2','D1E_2','D1F_2','D1G_2','D1H_2','D3_2','D3B_2','D4_2','D4B_2','D1A_3','D1B_3','D1C_3','D1D_3','D2A_3','D2B_3','D2C_3','D2D_3','D1E_3','D1F_3','D1G_3','D1H_3','D3_3','D3B_3','D4_3','D4B_3','D1A_4','D1B_4','D1C_4','D1D_4','D2A_4','D2B_4','D2C_4','D2D_4','D1E_4','D1F_4','D1G_4','D1H_4','D3_4','D3B_4','D4_4','D4B_4','D5_1','D6_1','D5_2','D6_2','D5_3','D6_3','D5_4','D6_4']
dreg_=[0]*200   # --- data value 
dreg_region=[0]*200   # --- data region value   <-- ????



# b/n reg setting
breg_name=['BH','BD1','BD2','BD3','BD4','BD5','BD6','BD7']
nreg_name=['NH','ND1','ND2','ND3','ND4','ND5','ND6','ND7']
breg_=[[0,1,2,3,4,5,6,7],
      [1,3,7,5,2,0,4,6],
      [2,7,4,1,6,3,0,5],
      [3,5,1,7,0,6,2,4],
      [4,2,6,0,7,1,5,3],
      [5,0,3,6,1,4,7,2],
      [6,4,0,2,5,7,3,1],
      [7,6,5,4,3,2,1,0]]
nreg_=breg_.copy()
bn_cnt=0


# ---   advan tp reg. list
tpreg_name=['TPH1A_1','TPH1B_1','TPH1C_1','TPH1D_1','TPH1E_1','TPH1F_1','TPH1G_1','TPH1H_1','TPH1A_2','TPH1B_2','TPH1C_2','TPH1D_2','TPH1E_2','TPH1F_2','TPH1G_2','TPH1H_2','TPH1A_3','TPH1B_3','TPH1C_3','TPH1D_3','TPH1E_3','TPH1F_3','TPH1G_3','TPH1H_3','TPH1A_4','TPH1B_4','TPH1C_4','TPH1D_4','TPH1E_4','TPH1F_4','TPH1G_4','TPH1H_4','TPH2A_1','TPH2B_1','TPH2C_1','TPH2D_1','TPH2E_1','TPH2F_1','TPH2G_1','TPH2H_1','TPH2A_2','TPH2B_2','TPH2C_2','TPH2D_2','TPH2E_2','TPH2F_2','TPH2G_2','TPH2H_2','TPH2A_3','TPH2B_3','TPH2C_3','TPH2D_3','TPH2E_3','TPH2F_3','TPH2G_3','TPH2H_3','TPH2A_4','TPH2B_4','TPH2C_4','TPH2D_4','TPH2E_4','TPH2F_4','TPH2G_4','TPH2H_4']
tpreg_=[0]*100

tp1=0
tp2=0
tp1_=[0,0,0,0,0] # --- for _1/_2/_3/_4 
tp2_=[0,0,0,0,0] # --- for _1/_2/_3/_4 

b_val_=[0,0,0,0,0]
b_val=0
n_val_=[0,0,0,0,0]
n_val=0
bn_use=0
dinv=0


x_addr=0
y_addr=0

jzd_status=0

# --- ca  format (FMD01/02)

FMD01_CA0=['Y0,Y8','X16','C0','C0,Y8','X16,Y4','X0,Y0','C0','Y16','C0','C0,C0','C0,Y12','/X16','/X16','/Y16,Y12','C0,FL','C0,Y14']
FMD01_CA1=['Y1,Y9','X17','C1','C1,Y9','X17,Y5','X1,Y1','C1','Y17','C1','C1,C1','C1,Y13','/X17','/X17','/Y17,Y13','Y10,FL','C1,Y15']
FMD01_CA2=['Y2,Y10','X18','C2','C2,Y10','X18,Y6','X2,Y2','C2','Y18','C2','C2,C2','C2,Y14','/X18','/X18','/Y18,FL','C2,Y14','C2,FL']
FMD01_CA3=['Y3,Y11','X19','X7','C3,Y11','X19,Y7','X3,Y3','Y4','Y19','C3','C3,C3','X14,Y15','/X19','/X19','/Y19,FL','C3,FL','C3,FL']
FMD01_CA4=['Y4,Y12','X11','X8','C4,FL','FL,FL','X4,FL','Y7','Y5','Y7','C4,C4','X15,FL','X11','FL','Y5,FL','Y9,FL','C4,FL']
FMD01_CA5=['Y5,Y13','X12','X9','C5,FL','C5,FL','X5,FL','Y8','Y6','Y8','C5,C5','FL,FL','X12','C5','Y6,FL','Y9,FL','C5,FL']
FMD01_CA6=['Y6,Y14','X13','X10','C6,FL','C6,FL','X6,FL','Y9','C6','Y9','Y7,Y15','FL,FL','X13','C6','C6,FL','Y8,FL','Y3,FL']

FMD02_CA0=['Y0,Y8','C0','C0','C0,Y8','C0,Y4','X0,Y0','C0','C0','C0','C0,C0','C0,Y12','/X16','/X16','/Y16,Y12','C0,FL','C0,Y14']
FMD02_CA1=['Y1,Y9','C1','C1','C1,Y9','C1,Y5','X1,Y1','C1','C1','C1','C1,C1','C1,Y13','/X17','/X17','/Y17,Y13','Y10,FL','C1,Y15']
FMD02_CA2=['Y2,Y10','C2','C2','C2,Y10','C2,Y6','X2,Y2','C2','C2','C2','C2,C2','C2,Y14','/X18','/X18','/Y18,FL','C2,Y14','C2,FL']
FMD02_CA3=['Y3,Y11','C3','X7','C3,Y11','C3,Y7','X3,Y3','Y4','C3','C3','C3,C3','X14,Y15','/X19','/X19','/Y19,FL','C3,FL','C3,FL']
FMD02_CA4=['Y4,Y12','X11','X8','C4,FL','FL,FL','X4,FL','Y7','Y5','Y7','C4,C4','X15,FL','X11','FL','Y5,FL','Y9,FL','C4,FL']
FMD02_CA5=['Y5,Y13','X12','X9','C5,FL','C5,FL','X5,FL','Y8','Y6','Y8','C5,C5','FL,FL','X12','C5','Y6,FL','Y9,FL','C5,FL']
FMD02_CA6=['Y6,Y14','X13','X10','C6,FL','C6,FL','X6,FL','Y9','C6','Y9','Y7,Y15','FL,FL','X13','C6','C6,FL','Y8,FL','Y3,FL']



# --- 주사용 scramble   x depth 128
scr2a=[0x0000,0x03FF,0x0400,0x07FF,0x0800,0x0BFF,0x0C00,0x0FFF,0x1000,0x13FF,0x1400,0x17FF,0x1800,0x1BFF,0x1C00,0x1FFF,0x2000,0x23FF,0x2400,0x27FF,0x2800,0x2BFF,0x2C00,0x2FFF,0x3000,0x33FF,0x3400,0x37FF,0x3800,0x3BFF,0x3C00,0x3FFF,
0x4000,0x43FF,0x4400,0x47FF,0x4800,0x4BFF,0x4C00,0x4FFF,0x5000,0x53FF,0x5400,0x57FF,0x5800,0x5BFF,0x5C00,0x5FFF,0x6000,0x63FF,0x6400,0x67FF,0x6800,0x6BFF,0x6C00,0x6FFF,0x7000,0x73FF,0x7400,0x77FF,0x7800,0x7BFF,0x7C00,0x7FFF,
0x8000,0x83FF,0x8400,0x87FF,0x8800,0x8BFF,0x8C00,0x8FFF,0x9000,0x93FF,0x9400,0x97FF,0x9800,0x9BFF,0x9C00,0x9FFF,0xA000,0xA3FF,0xA400,0xA7FF,0xA800,0xABFF,0xAC00,0xAFFF,0xB000,0xB3FF,0xB400,0xB7FF,0xB800,0xBBFF,0xBC00,0xBFFF,
0xC000,0xC3FF,0xC400,0xC7FF,0xC800,0xCBFF,0xCC00,0xCFFF,0xD000,0xD3FF,0xD400,0xD7FF,0xD800,0xDBFF,0xDC00,0xDFFF,0xE000,0xE3FF,0xE400,0xE7FF,0xE800,0xEBFF,0xEC00,0xEFFF,0xF000,0xF3FF,0xF400,0xF7FF,0xF800,0xFBFF,0xFC00,0xFFFF]

scr2=[0]*1024
scr2[0:128]=scr2a
scr2[128:256]=scr2a
scr2[256:384]=scr2a
scr2[384:512]=scr2a
scr2[512:640]=scr2a
scr2[640:768]=scr2a
scr2[768:896]=scr2a
scr2[896:1024]=scr2a



header_sdef_alias=['']*3000
header_sdef_desc=['']*3000
header_sdef_cbit=['']*3000
sdef_idx=0

xsp=127

# path=str(sys.argv[1])
path='.\\'

#path="./T5511/Dsol_200109/X16_8BANK_R21/"
file_list = os.listdir(path)
# print(path)
# src_file=str(sys.argv[1])
patline=['']
patline_seq=['']
pccnt_seq=[0]
icnt_seq=[0]
label_seq=['']
lineway_seq=[0]
patline_f0=['']

# pattern .
patnlist=[
   '',
   'GOSUB FUNA(3061,6,4,4,183,LP5VD2,LP5TCK,"VND01","FSD02","PRFE2","PDEY4FADC9D6A",#6666,0.0NS,3.9US," Address Compliment RDBI "1"=4              ")'


  ]
	

# print(patnlist[0][5:len(patnlist[0])-1].split(','))


# 1개 패턴 씩 추출 시작
for ipat in range(len(patnlist)):
   
   
   # ------------------------------------------------------------
   # ------------------------------------------------------------
   # 0. .pattern 사전 작업.
   # ------------------------------------------------------------
   # ------------------------------------------------------------

   
   print(patnlist[ipat])
   #---------------- init
   xyreg_=[0]*100
   dreg_=[0]*200
   dreg_region=[0]*200
   tpreg_=[0]*100

   tp1=0
   tp2=0
   tp1_=[0,0,0,0,0]
   tp2_=[0,0,0,0,0]
   jzd_status=0
   dinv=0


   # default 조건
   for idr in range(len(dreg_name)):
      if dreg_name[idr]=='D2A_1':
         dreg_[idr]=int('0x3f0',16)
      elif dreg_name[idr]=='D2A_2':
         dreg_[idr]=int('0x3f0',16)
      elif dreg_name[idr]=='D3B_1':
         dreg_[idr]=int('0xffff',16)
      elif dreg_name[idr]=='D4B_1':
         dreg_[idr]=int('0x20',16)
      elif dreg_name[idr]=='D4B_2':
         dreg_[idr]=int('0x20',16)

   # for itp in range(len(tpreg_name)):
   #    if tpreg_name[itp]=='TPH1A_1':
   #       tpreg_[itp]=int('0x6666',16)
   #    if tpreg_name[itp]=='TPH2A_1':
   #       tpreg_[itp]=int('0x6666',16)

   x_addr=0
   y_addr=0

   # --- label 정보 저장 공간  (이름/pc/?)
   label_name=['']*240
   label_pc=[0]*240
   label_idx=[0]*240
   ccflg='1011000000000001'

   # --- header.asc 분해 - 최종 cbit 만 남게.
   header_sdef_alias=['']*3000
   header_sdef_desc=['']*3000
   header_sdef_cbit=['']*3000
   sdef_idx=0

   # x max address
   xsp=127

   #---------------- 


   if len(patnlist[ipat])<10:
      continue
   dreg_region=[0]*200

   # print(patnlist[ipat])
   patn_lst=patnlist[ipat][5:len(patnlist[ipat])-1].split(',')
   # patn_name=patn_lst[10].strip('"')+'NN.asc'
   patn_name=patn_lst[10].strip('"')+'NN.asc'
   patn_fmt=patn_lst[8].strip('"')
   patn_mode=patn_lst[9].strip('"')
   patn_iofmt=patn_lst[11]
   patn_scr=patn_lst[9].strip('"')[4]
   patn_tn=patn_lst[0]

   if patn_mode[0]=='D':
      dinv=1
      print(patn_mode)

   
   if patn_scr=='2':
      xsp=0x7f
   if patn_scr=='N':
      xsp=0xffff

   # print(patn_scr,xsp)

   if patn_fmt=='FTD01':
      pat_format='FMD01'
   elif patn_fmt=='FTD02':
      pat_format='FMD02'
   else:
      pat_format=patn_fmt


   if patn_mode[2]=='F':
      print("HSDI_OTF")
      if patn_mode[3]=='E': ccflg='0000000000010100'
      if patn_mode[3]=='O': ccflg='0000000000011000'
   elif patn_mode[2]=='G':
      print("HSDI_OTF_ODD")
      if patn_mode[3]=='E': ccflg='0000000000110100'
      if patn_mode[3]=='O': ccflg='0000000000111000'
   elif patn_mode[2]=='G':
      print("HSDI/DM_OTF_ODD")
      if patn_mode[3]=='E': ccflg='0000000001010100'
      if patn_mode[3]=='O': ccflg='0000000001011000'

   compile_opt_=0
   compile_opt1=''
   compile_opt2=''
   if patn_mode[2] in ['C','G','I','O','P','Q']:
      compile_opt1='B'
   else:
      compile_opt1='A'

   if patn_mode[3]=='E': compile_opt2='E'
   if patn_mode[3]=='O': compile_opt2='O'

   print(patn_mode,patn_mode[2],patn_mode[3],compile_opt1,compile_opt2)
